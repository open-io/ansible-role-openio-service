---
#
# Check variables
#
- name: "Check string variable"
  assert:
    quiet: true
    that:
      - "{{ item }} is defined"
      - "{{ item }} is string"
      - "{{ item }} | length > 0"
    fail_msg: "'{{ item }}' is not defined or empty"
  loop:
    - openio_service_type
    - openio_service_name
  tags:
    - configure
    - install
- name: "[{{ openio_service_name }}] Check array variable"
  assert:
    quiet: true
    that:
      - "{{ item }} is defined"
      - "{{ item }} is not string"
      - "{{ item }} is not mapping"
      - "{{ item }} is sequence"
    fail_msg: "'{{ item }}' is not defined or not an array"
  loop:
    - openio_service_packages
    - openio_service_directories
    - openio_service_configuration_files
    - openio_service_services
  tags:
    - configure
    - install

#
# Install packages
#
- name: "[{{ openio_service_name }}] Install packages"
  package:
    name: "{{ openio_service_packages }}"
    state: "{{ 'latest' if openio_service_package_upgrade else 'present' }}"
  ignore_errors: "{{ ansible_check_mode }}"
  register: _packages
  until: _packages is success
  retries: 10
  delay: 2
  tags: install
  when: openio_service_packages | length > 0

#
# Creates directories
#
- name: "[{{ openio_service_name }}] Create directories"
  file:
    state: directory
    path: "{{ item.path }}"
    mode: "{{ item.mode | d('0750') }}"
    owner: "{{ item.owner | d('openio') }}"
    group: "{{ item.group | d('openio') }}"
  register: _register_directories
  loop: "{{ openio_service_directories + _service_directories }}"
  tags: configure

#
# Install configuration files
#
- name: "[{{ openio_service_name }}] install configuration files"
  template:
    src: "{{ src }}"
    dest: "{{ dest }}"
    mode: "{{ item.mode | d('0640') }}"
    owner: "{{ item.owner | d('openio') }}"
    group: "{{ item.group | d('openio') }}"
    validate: "{{ item.validate | d(omit) }}"
    block_start_string: "{{ item.block_start_string | d(omit) }}"
    block_end_string: "{{ item.block_end_string | d(omit) }}"
    variable_start_string: "{{ item.variable_start_string | d(omit) }}"
    variable_end_string: "{{ item.variable_end_string | d(omit) }}"
    newline_sequence: "{{ item.newline_sequence | d(omit) }}"
    output_encoding: "{{ item.output_encoding | d(omit) }}"
    lstrip_blocks: "{{ item.lstrip_blocks | d(omit) }}"
    force: "{{ item.force | d(omit) }}"
    follow: "{{ item.follow | d(omit) }}"
    backup: "{{ item.backup | d(omit) }}"
  vars:
    src: "{{ item.template | d(item.name + '.j2') }}"
    dest: "{{ item.dir | d(openio_service_conf_dir) }}/{{ item.name }}"
  register: _register_configuration_files
  loop: "{{ openio_service_configuration_files }}"
  loop_control:
    label: "{{ dest }}"
  tags: configure

#
# manager gridinit services
#
- name: "[{{ openio_service_name }}] Manage services"
  include_tasks: service.yml
  loop: "{{ openio_service_services }}"
  loop_control:
    label: "{{ service.name | d(openio_service_name) }}"
    loop_var: service

#
# CHECK service by uri, port, command or shell
#
- name: "[{{ openio_service_name }}] Check service"
  include_tasks: "checks/{{ check | trim }}.yml"
  vars:
    check: |
      {% if 'uri' in item %}
      uri
      {% elif 'wait_for' in item %}
      wait_for
      {% elif 'command' in item %}
      command
      {% elif 'shell' in item %}
      shell
      {% else %}
      unknown check type
      {% endif %}
    label: |
      {% if 'uri' in item and 'url' in item.uri %}
      {{ item.uri.url }}
      {% elif 'wait_for' in item and 'host' in item.wait_port and 'port' in item.wait_port %}
      {{ item.wait_port.host }}:{{ item.wait_port.port }}
      {% elif 'command' in item and 'cmd' in item.command %}
      `{{ item.command.cmd }}`
      {% elif 'shell' in item and 'cmd' in item.shell %}
      `{{ item.shell.cmd }}`
      {% else %}
      {{ item }}
      {% endif %}
  loop: "{{ openio_service_checks }}"
  loop_control:
    label: "{{ label }}"
  tags: configure
...
