#!/usr/bin/env python3

import sys
import os
import signal
import logging
from logging.handlers import SysLogHandler
from logging import StreamHandler
import argparse

#
# Manage args
#
parser = argparse.ArgumentParser()
parser.add_argument("-f", "--facility", type=str, default="daemon", help="syslog facility (daemon)")
parser.add_argument("-p", "--pid", action='store_true', help="log pid (yes)")
parser.add_argument("-i", "--ident", type=str, help="specify logging ident (program name)")
parser.add_argument("program", type=str, help="program to run")
parser.add_argument("args", type=str, nargs='*', help="program arguments")
args = parser.parse_args()


#
# ARGS
#
if not args.ident:
  args.ident = os.path.basename(args.program)

if args.pid:
  ident = "%s[%d]" % (args.ident , os.getpid())
else:
  ident = args.ident

#
# Prepare logging
#
log = logging.getLogger('syslog')
log.setLevel(logging.DEBUG)
syslog_handler = SysLogHandler(address = '/dev/log', facility = args.facility)
syslog_handler.ident = "%s: " % ident
log.addHandler(syslog_handler)

stdout_handler = StreamHandler(stream=sys.stdout)
stdout_handler.setFormatter(logging.Formatter('%(asctime)s %(message)s'))
log.addHandler(stdout_handler)

#
# Fork
#
(pipe_r, pipe_w) = os.pipe()
pid = os.fork()
if pid == 0:
  #
  # Children
  #
  os.close(pipe_r)
  os.dup2(pipe_w, sys.stdout.fileno())
  os.dup2(pipe_w, sys.stderr.fileno())
  os.execv(args.program, [os.path.basename(args.program)] + args.args)
  sys.exit(0)

#
# Parent
#
os.close(pipe_w)
stdin = open(pipe_r, 'r')

def sendToChildren(signum, frame):
  os.kill(pid, signum)

for s in [signal.SIGTERM, signal.SIGINT, signal.SIGHUP, signal.SIGUSR1, signal.SIGUSR2, signal.SIGABRT, signal.SIGALRM, signal.SIGCONT, signal.SIGINT]:
	signal.signal(s, sendToChildren)

try:
  from setproctitle import setproctitle
  setproctitle("%s: %s" % (os.path.basename(sys.argv[0]), args.ident))
except:
  pass

if args.pid:
  syslog_handler.ident = "%s[%d]: " % (args.ident , pid)

while True:
  data = stdin.readline()
  if not data: break
  log.info(data.strip())
sys.exit(0)
