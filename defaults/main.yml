---
openio_service_namespace: "{{ namespace | default('OPENIO') }}"
openio_service_maintenance_mode: "{{ openio_maintenance_mode | d(false) }}"

# openio_service_type
openio_service_id: 0
openio_service_name: "{{ openio_service_type }}-{{ openio_service_id }}"
openio_service_gridinit_service_name: "{{ openio_service_namespace }}-{{ openio_service_name }}"
openio_service_gridinit_dir: "/etc/gridinit.d/{{ openio_service_namespace }}"
openio_service_gridinit_file_prefix: ""
openio_service_inventory_dir: "/etc/oio/sds/{{ openio_service_namespace }}/inventory"
openio_service_inventory_file: "{{ openio_service_inventory_dir }}/{{ openio_service_name }}.yml"
openio_service_package_upgrade: "{{ openio_package_upgrade | d(false) }}"
openio_service_conf_dir: "/etc/oio/sds/{{ openio_service_namespace }}/{{ openio_service_name }}"
openio_service_log_dir: "/var/log/oio/sds/{{ openio_service_namespace }}/{{ openio_service_name }}"
openio_service_volume: "/var/lib/oio/sds/{{ openio_service_namespace }}/{{ openio_service_name }}"
openio_service_syslog_tag: "OIO,{{ openio_service_namespace }},{{ openio_service_type }},{{ openio_service_id }}"
openio_service_gridinit_default_group: "{{ [openio_service_namespace,openio_service_type,openio_service_id] | join(',') }}"

openio_service_state: present

openio_service_packages: []
# openio_service_packages:
#   - openio-sds-common
#   - openio-*swift*
#   - oio-exporter=1.42.0
#

openio_service_directories: []
# openio_service_directories:
#   - path: /path/to/directory
#     owner: root (openio by default)
#     group: root (openio by default)
#     mode: '0755' ('0750' by default)
#     other parameters from the `file` module

openio_service_configuration_files: []
# openio_service_configuration_files:
#   - name: toto.conf
#     dir: /tmp (openio_service_conf_dir by default)
#     template: mytemplate.j2 (name.j2 by default)
#     # other parameters from the template module

openio_service_services: []
# openio_service_services:
#   - command: "/path/to/command arg1 arg2"
#     redirect_stdout_to_syslog:
#       facility: daemon
#       ident = prout #openio_service_syslog_tag by default
#       pid = true # to log pid
#     name: myservice (openio_service_name by default)
#     enabled: false (true by default)
#     start_at_boot: false (true by default)
#     on_die: respawn (respawn by default)
#     group: group1,group2 ({{ openio_service_gridinit_default_group }} by default)
#     uid: root (openio by default)
#     gid: root (openio by default)
#     env: ({PATH: /usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin} by default)
#       JAVA_HOME: /usr/share/java
#     limit: ({} by default)
#       stack_size: 123456
#    

openio_service_checks: []
# openio_service_checks:
#   # URI
#   - uri: # same as uri module parameters: https://docs.ansible.com/ansible/latest/modules/uri_module.html
#       url: "http://{{ openio_grafana_bind_address }}:{{ openio_grafana_bind_port }}/api/health"
#     until: "_return is success"
#     retries: 5
#     delay: 2
#     failed_when: "_return is failed"
#     changed_when: false
#
#   # Command
#   - command: # same as command module parameters: https://docs.ansible.com/ansible/latest/modules/command_module.html
#       cmd: oio-tool ping 172.30.0.111:6120
#     until: "_return is success"
#     retries: 5
#     delay: 2
#     failed_when: "_return is failed"
#     changed_when: false
#
#   # Shell
#   - shell: # same as shell module parameters: https://docs.ansible.com/ansible/latest/modules/shell_module.html
#       cmd: "false || true"
#     until: "_return is success"
#     retries: 5
#     delay: 2
#     failed_when: "_return is failed"
#     changed_when: false
#
#   # Wait For
#   - wait_for: # same as wait_for module parameters: https://docs.ansible.com/ansible/latest/modules/wait_for_module.html
#       host: "{{ openio_grafana_bind_address }}"
#       port: "{{ openio_grafana_bind_port }}"
#     until: "_return is success"
#     retries: 5
#     delay: 2
#     failed_when: "_return is failed"
#     changed_when: false
...
